name: Build & Push Multi-Arch Docker Images

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - Dockerfile
          - resources/Dockerfile.RHEL9.6
          - resources/Dockerfile.RKEL9.6
          - resources/Dockerfile.RKEL10.0
          - resources/Dockerfile.RHEL10.0 # 修正拼写
        platform:
          - linux/amd64
          - linux/arm64
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Dockerfile tag
        id: tag
        run: |
          file=${{ matrix.dockerfile }}
          platform=${{ matrix.platform }}
          case "$file" in
            Dockerfile) echo "tag=bookworm" >> $GITHUB_OUTPUT ;;
            resources/Dockerfile.RHEL9.6) echo "tag=rhel9.6" >> $GITHUB_OUTPUT ;;
            resources/Dockerfile.RKEL9.6) echo "tag=rkel9.6" >> $GITHUB_OUTPUT ;;
            resources/Dockerfile.RKEL10.0) echo "tag=rkel10.0" >> $GITHUB_OUTPUT ;;
            resources/Dockerfile.RHEL10) echo "tag=rhel10.0" >> $GITHUB_OUTPUT ;;
            *) echo "tag=custom" >> $GITHUB_OUTPUT ;;
          esac
          safe_platform=$(echo "${platform}" | tr '/' '-')
          echo "safe_platform=${safe_platform}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Docker image locally for artifact export
        run: |
          docker build -f ${{ matrix.dockerfile }} -t stalwart-local:${{ steps.tag.outputs.tag }} .

      - name: Save Docker image as tar
        run: |
          docker save -o stalwart-image-${{ steps.tag.outputs.tag }}.tar stalwart-local:${{ steps.tag.outputs.tag }}

      - name: Upload Docker image tar as artifact
        uses: actions/upload-artifact@v5
        with:
          name: stalwart-image-${{ steps.tag.outputs.tag }}-${{ steps.tag.outputs.safe_platform }}
          path: stalwart-image-${{ steps.tag.outputs.tag }}.tar

      - name: Extract binaries from image
        run: |
          id=$(docker create stalwart-local:${{ steps.tag.outputs.tag }})
          docker cp $id:/usr/local/bin/stalwart ./stalwart-${{ steps.tag.outputs.tag }} || true
          docker cp $id:/usr/local/bin/stalwart-cli ./stalwart-cli-${{ steps.tag.outputs.tag }} || true
          docker rm $id

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v5
        with:
          name: stalwart-binaries-${{ steps.tag.outputs.tag }}-${{ steps.tag.outputs.safe_platform }}
          path: |
            stalwart-${{ steps.tag.outputs.tag }}
            stalwart-cli-${{ steps.tag.outputs.tag }}

# 说明：
# 1. 修正了 Dockerfile 路径拼写错误。
# 2. 增加了 buildx 缓存，提升多次构建速度。
# 3. 所有平台和所有 Dockerfile 变体的二进制产物都会被上传，命名区分，方便下载和溯源。
# 4. 保留了多平台推送和 tag 逻辑。 

